{"version":3,"sources":["webpack://pixi-shadows/webpack/universalModuleDefinition","webpack://pixi-shadows/webpack/bootstrap","webpack://pixi-shadows/./src/shadows/Application.js","webpack://pixi-shadows/./src/shadows/Shadow.js","webpack://pixi-shadows/./src/shadows/filters/FilterFuncs.js","webpack://pixi-shadows/./src/shadows/filters/ShadowFilter.js","webpack://pixi-shadows/./src/shadows/filters/ShadowMapFilter.js","webpack://pixi-shadows/./src/shadows/filters/ShadowMaskFilter.js","webpack://pixi-shadows/./src/shadows/index.js","webpack://pixi-shadows/./src/shadows/mixins/Container.js"],"names":["Application","options","arg2","arg3","arg4","arg5","container","stage","shadowFilter","ShadowFilter","renderer","width","height","PIXI","shadows","filters","push","cacheParent","parent","_tempDisplayObjectParent","updateTransform","filterInstances","forEach","update","render","undefined","Shadow","range","intensity","pointCount","scatterRange","RenderTexture","create","_range","_pointCount","_scatterRange","_intensity","_radialResolution","_depthResolution","_darkenOverlay","anchor","set","_ignoreShadowCaster","__createShadowMapSources","texture","destroy","_shadowMapSprite","_shadowMapResultSprite","_shadowMapResultTexture","baseTexture","scaleMode","SCALE_MODES","NEAREST","Sprite","ShadowMapFilter","filter","ShadowMaskFilter","blendMode","BLEND_MODES","ADD","renderStep","shadowCasterSprite","shadowOverlaySprite","_shadowCasterSprite","_shadowOverlaySprite","__updateTextureSize","count","resolution","sprite","bool","filterFuncs","_width","_height","uniforms","ambientLight","size","_useShadowCastersAsOverlay","_clearShadowMaskBeforeDraw","__createCasterSources","__createOverlaySources","__createMaskSources","_shadowOverlayResultTexture","_shadowOverlayResultSprite","_shadowOverlayContainer","Container","_shadowCasterResultTexture","_shadowCasterResultSprite","_shadowCasterContainer","_maskResultTexture","_maskResultSprite","_maskMatrix","Matrix","_maskContainer","children","child","_activeParentLayer","length","overlay","shadow","filterManager","input","output","maskSprite","tex","valid","transform","TextureMatrix","mask","otherMatrix","calculateSpriteMatrix","applyFilter","frac","val","Filter","maxDepthResolution","lightPointCount","dimensions","radialResolution","autoFit","padding","ignoreShadowCasterMatrix","darkenOverlay","sc","shadowCasterSpriteDimensions","shadowCasterSampler","_texture","wt","worldTransform","scale","Math","sqrt","a","b","lightRange","lightScatterRange","lightLoc","tx","ty","depthResolution","isc","ignoreShadowCaster","hasIgnoreShadowCaster","copy","invert","ignoreShadowCasterDimensions","ignoreShadowCasterSampler","shadowSampler","overlayMatrix","shadowOverlaySpriteDimensions","shadowOverlaySampler","lightIntensity","texSize","__classes","ContainerSetup","FilterFuncs","setup","orTransform","prototype","shadowLayers","isShadowCaster","isShadowOverlay","map","layer","indexOf","apply","arguments","orRenderWebGL","renderWebGL"],"mappings":"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","file":"pixi-shadows.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pixi-shadows\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pixi-shadows\"] = factory();\n\telse\n\t\troot[\"pixi-shadows\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/shadows/index.js\");\n","import ContainerSetup from \"./mixins/Container\"; // Can also be accessed through PIXI.shadows.__classes\r\nimport ShadowFilter from \"./filters/ShadowFilter\"; // Same here, and for all other classes\r\n\r\nexport default class Application extends PIXI.Application {\r\n    constructor(options, arg2, arg3, arg4, arg5) {\r\n        super(options, arg2, arg3, arg4, arg5);\r\n\r\n        // Set up the container mixin so that it tells the filter about the available shadows and objects\r\n        ContainerSetup();\r\n    }\r\n\r\n    setupBasicShadows(container) {\r\n        // If no container is passed, use the stage\r\n        if (!container) container = this.stage;\r\n\r\n        // Create a filter, and apply it to the whole stage (requires a black background)\r\n        var shadowFilter = new ShadowFilter(\r\n            this.renderer.width,\r\n            this.renderer.height\r\n        );\r\n\r\n        if (!PIXI.shadows.filters) PIXI.shadows.filters = [];\r\n        PIXI.shadows.filters.push(shadowFilter);\r\n        container.filters = [shadowFilter];\r\n\r\n        //  Also store it on the stage for easy access\r\n        container.shadowFilter = shadowFilter;\r\n    }\r\n\r\n    render() {\r\n        // Update stage transforms\r\n        const cacheParent = this.stage.parent;\r\n        this.stage.parent = this.renderer._tempDisplayObjectParent;\r\n        this.stage.updateTransform();\r\n        this.stage.parent = cacheParent;\r\n\r\n        // Update the shadow filter\r\n        PIXI.shadows.filterInstances.forEach(shadowFilter => {\r\n            shadowFilter.update(this.renderer);\r\n        });\r\n        PIXI.shadows.filterInstances = [];\r\n\r\n        // Render the stage without updating the transforms again\r\n        this.renderer.render(this.stage, undefined, undefined, undefined, true);\r\n    }\r\n}\r\n","import ShadowMaskFilter from \"./filters/ShadowMaskFilter\";\r\nimport ShadowMapFilter from \"./filters/ShadowMapFilter\";\r\n\r\n/**\r\n * @class\r\n * @memberof PIXI.shadows\r\n *\r\n * @param range {number} The radius of the lit area in pixels.\r\n * @param [intensity=1] {number} The opacity of the lit area.\r\n * @param [pointCount=20] {number} The number of points that makes up this light.\r\n * @param [scatterRange=15] {number} The radius at which the points of the light should be scattered.\r\n */\r\n\r\nexport default class Shadow extends PIXI.Sprite {\r\n    constructor(range, intensity, pointCount, scatterRange) {\r\n        super(PIXI.RenderTexture.create(range * 2, range * 2));\r\n\r\n        this._range = range;\r\n        this._pointCount = pointCount || 20; //The number of lightpoins\r\n        this._scatterRange = scatterRange || (this._pointCount == 1 ? 0 : 15);\r\n        this._intensity = intensity || 1;\r\n        this._radialResolution = 800;\r\n        this._depthResolution = 1; //per screen pixel\r\n        this._darkenOverlay = false;\r\n        this.anchor.set(0.5);\r\n\r\n        this._ignoreShadowCaster;\r\n\r\n        this.__createShadowMapSources();\r\n    }\r\n    // Create the texture to apply this mask filter to\r\n    __updateTextureSize() {\r\n        this.texture.destroy();\r\n        this.texture = PIXI.RenderTexture.create(\r\n            this._range * 2,\r\n            this._range * 2\r\n        );\r\n    }\r\n    // Create the resources that create the shadow map\r\n    __createShadowMapSources() {\r\n        if (this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if (this._shadowMapResultSprite) this._shadowMapResultSprite.destroy();\r\n        if (this._shadowMapResultTexture)\r\n            this._shadowMapResultTexture.destroy();\r\n\r\n        // A blank texture/sprite to apply the filter to\r\n        this._shadowMapResultTexture = PIXI.RenderTexture.create(\r\n            this._radialResolution,\r\n            this._pointCount\r\n        );\r\n        this._shadowMapResultTexture.baseTexture.scaleMode =\r\n            PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowMapSprite = new PIXI.Sprite(this._shadowMapResultTexture);\r\n        this._shadowMapSprite.filters = [new ShadowMapFilter(this)];\r\n\r\n        // The resulting texture/sprite after the filter has been applied\r\n        this._shadowMapResultSprite = new PIXI.Sprite(\r\n            this._shadowMapResultTexture\r\n        );\r\n\r\n        // Create the mask filter\r\n        var filter = new ShadowMaskFilter(this);\r\n        filter.blendMode = PIXI.BLEND_MODES.ADD;\r\n        this.filters = [filter];\r\n    }\r\n    // Properly dispose all the created resources\r\n    destroy() {\r\n        if (this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if (this._shadowMapResultSprite) this._shadowMapResultSprite.destroy();\r\n        if (this._shadowMapResultTexture)\r\n            this._shadowMapResultTexture.destroy();\r\n        this.texture.destroy();\r\n        return super.destroy();\r\n    }\r\n    // Don't render this sprite unless we are in the dedicated render step called by the shadow filter\r\n    renderAdvancedWebGL(renderer) {\r\n        if (this.renderStep) super.renderAdvancedWebGL(renderer);\r\n    }\r\n\r\n    // Update the map to create the mask from\r\n    update(renderer, shadowCasterSprite, shadowOverlaySprite) {\r\n        this._shadowCasterSprite = shadowCasterSprite;\r\n        this._shadowOverlaySprite = shadowOverlaySprite;\r\n        renderer.render(\r\n            this._shadowMapSprite,\r\n            this._shadowMapResultTexture,\r\n            true,\r\n            null,\r\n            true\r\n        );\r\n    }\r\n\r\n    // Attribute setters\r\n    /**\r\n     * @type {number} The radius of the lit area in pixels.\r\n     */\r\n    set range(range) {\r\n        this._range = range;\r\n        this.__updateTextureSize();\r\n    }\r\n    /**\r\n     * @type {number} The number of points that makes up this light, for soft shadows. (More points = softer shadow edges + more intensive).\r\n     */\r\n    set pointCount(count) {\r\n        this._pointCount = count;\r\n        this.__createShadowMapSources();\r\n    }\r\n    /**\r\n     * @type {number} The opacity of the lit area. (may exceed 1).\r\n     */\r\n    set scatterRange(range) {\r\n        this._scatterRange = range;\r\n    }\r\n    /**\r\n     * @type {number} The radius at which the points of the light should be scattered. (Greater range = software shadow).\r\n     */\r\n    set intensity(intensity) {\r\n        this._intensity = intensity;\r\n    }\r\n    /**\r\n     * @type {number} The number of rays to draw for the light. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    set radialResolution(resolution) {\r\n        this._radialResolution = resolution;\r\n        this.__createShadowMapSources();\r\n    }\r\n    /**\r\n     * @type {number} The of steps to take per pixel. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    set depthResolution(resolution) {\r\n        this._depthResolution = resolution;\r\n    }\r\n    /**\r\n     * @type {PIXI.Sprite} A shadow caster to ignore while creating the shadows. (Can be used if sprite and light always overlap).\r\n     */\r\n    set ignoreShadowCaster(sprite) {\r\n        this._ignoreShadowCaster = sprite;\r\n    }\r\n    /**\r\n     * @type {boolean} Whther or not overlays in shadows should become darker (can create odd artifacts, is very experimental/unfinished)\r\n     */\r\n    set darkenOverlay(bool) {\r\n        this._darkenOverlay = bool;\r\n    }\r\n\r\n    // Attribute getters\r\n    get range() {\r\n        return this._range;\r\n    }\r\n    get pointCount() {\r\n        return this._pointCount;\r\n    }\r\n    get scatterRange() {\r\n        return this._scatterRange;\r\n    }\r\n    get intensity() {\r\n        return this._intensity;\r\n    }\r\n    get radialResolution() {\r\n        return this._radialResolution;\r\n    }\r\n    get depthResolution() {\r\n        return this._depthResolution;\r\n    }\r\n    get ignoreShadowCaster() {\r\n        return this._ignoreShadowCaster;\r\n    }\r\n    get darkenOverlay() {\r\n        return this._darkenOverlay;\r\n    }\r\n}\r\n","// Some functions to map a value as a color\nexport const filterFuncs = `\nfloat colorToFloat(vec4 color){\n    return (color.r + (color.g + color.b * 256.0) * 256.0) * 255.0 - 8388608.0;\n}\nvec4 floatToColor(float f){\n    f += 8388608.0;\n    vec4 color;\n    color.a = 255.0;\n    color.b = floor(f / 256.0 / 256.0);\n    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);\n    return color / 255.0;\n}\n`;","export default class ShadowFilter extends PIXI.Filter {\r\n    constructor(width, height) {\r\n        super(\r\n            `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 otherMatrix;\r\n            \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            void main(void)\r\n            {\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n            \r\n                vTextureCoord = aTextureCoord;\r\n                vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\r\n            }\r\n        `,\r\n            `                    \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            uniform sampler2D uSampler;\r\n            uniform sampler2D mask;\r\n            uniform vec4 maskClamp;\r\n            uniform float ambientLight;\r\n            \r\n            void main(void){            \r\n                vec4 original = texture2D(uSampler, vTextureCoord);\r\n                vec4 masky = texture2D(mask, vMaskCoord);\r\n            \r\n                original *= ambientLight + (1.0 - ambientLight) * (masky.r + masky.g + masky.b) / 3.0;\r\n            \r\n                gl_FragColor = original;\r\n            }\r\n        `\r\n        );\r\n\r\n        this._width = width;\r\n        this._height = height;\r\n\r\n        this.uniforms.ambientLight = 0.0;\r\n        this.uniforms.size = [this._width, this._height];\r\n        this._useShadowCastersAsOverlay = true;\r\n        this._clearShadowMaskBeforeDraw = true;\r\n\r\n        this.__createCasterSources();\r\n        this.__createOverlaySources();\r\n        this.__createMaskSources();\r\n    }\r\n    // Shadow overlay objects\r\n    __createOverlaySources() {\r\n        if (this._shadowOverlayResultTexture)\r\n            this._shadowOverlayResultTexture.destroy();\r\n        if (this._shadowOverlayResultSprite)\r\n            this._shadowOverlayResultSprite.destroy();\r\n\r\n        if (!this._shadowOverlayContainer)\r\n            this._shadowOverlayContainer = new PIXI.Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowOverlayResultTexture = PIXI.RenderTexture.create(\r\n            this._width,\r\n            this._height\r\n        );\r\n        this._shadowOverlayResultTexture.baseTexture.scaleMode =\r\n            PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowOverlayResultSprite = new PIXI.Sprite(\r\n            this._shadowOverlayResultTexture\r\n        );\r\n    }\r\n    // Shadow caster objects\r\n    __createCasterSources() {\r\n        if (this._shadowCasterResultTexture)\r\n            this._shadowCasterResultTexture.destroy();\r\n        if (this._shadowCasterResultSprite)\r\n            this._shadowCasterResultSprite.destroy();\r\n\r\n        if (!this._shadowCasterContainer)\r\n            this._shadowCasterContainer = new PIXI.Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowCasterResultTexture = PIXI.RenderTexture.create(\r\n            this._width,\r\n            this._height\r\n        );\r\n        this._shadowCasterResultTexture.baseTexture.scaleMode =\r\n            PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowCasterResultSprite = new PIXI.Sprite(\r\n            this._shadowCasterResultTexture\r\n        );\r\n    }\r\n    // Final mask to apply as a filter\r\n    __createMaskSources() {\r\n        if (this._maskResultTexture) this._maskResultTexture.destroy();\r\n        if (this._maskResultSprite) this._maskResultSprite.destroy();\r\n\r\n        // Create maskMatrix for shader transform data\r\n        if (!this._maskMatrix) this._maskMatrix = new PIXI.Matrix();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._maskResultTexture = PIXI.RenderTexture.create(\r\n            this._width,\r\n            this._height\r\n        );\r\n        this._maskResultTexture.baseTexture.scaleMode =\r\n            PIXI.SCALE_MODES.NEAREST;\r\n        if (!this._maskContainer) this._maskContainer = new PIXI.Container();\r\n        this._maskResultSprite = new PIXI.Sprite(this._maskResultTexture);\r\n    }\r\n    // Update the mask texture (called from the Application mixin)\r\n    update(renderer) {\r\n        // Shadows and objects will automatically be added to containers because of the Container mixin\r\n\r\n        /* render shadow casters */\r\n        this._shadowCasterContainer.children.forEach(child => {\r\n            // Remove the parent layer from the objects in order to properly render it to the container\r\n            child._activeParentLayer = null;\r\n\r\n            // Indicate we are performing a sub render in the shadow process (other renders aren't executed)\r\n            child.renderStep = true;\r\n        });\r\n\r\n        // Render all the objects onto 1 texture\r\n        renderer.render(\r\n            this._shadowCasterContainer,\r\n            this._shadowCasterResultTexture,\r\n            true,\r\n            null,\r\n            true\r\n        );\r\n\r\n        // Indicate that we are no longer performing a sub render in the shadow process\r\n        this._shadowCasterContainer.children.forEach(child => {\r\n            child.renderStep = false;\r\n        });\r\n\r\n        // Remove all the objects from the container\r\n        this._shadowCasterContainer.children.length = 0;\r\n\r\n        /* render shadow overlays */\r\n        if (!this._useShadowCastersAsOverlay) {\r\n            this._shadowOverlayContainer.children.forEach(child => {\r\n                child._activeParentLayer = null;\r\n\r\n                // Indicate we are performing a sub render in the shadow process (other renders aren't executed)\r\n                child.renderStep = true;\r\n            });\r\n\r\n            // Render all the objects onto 1 texture\r\n            renderer.render(\r\n                this._shadowOverlayContainer,\r\n                this._shadowOverlayResultTexture,\r\n                true,\r\n                null,\r\n                true\r\n            );\r\n\r\n            // Indicate that we are no longer performing a sub render in the shadow process\r\n            this._shadowOverlayContainer.children.forEach(child => {\r\n                child.renderStep = false;\r\n            });\r\n\r\n            // Remove all the objects from the container\r\n            this._shadowOverlayContainer.children.length = 0;\r\n        }\r\n\r\n        /* render shadows */\r\n\r\n        // Update all shadows and indicate that they may properly be rendered now\r\n        let overlay = this._useShadowCastersAsOverlay\r\n            ? this._shadowCasterResultSprite\r\n            : this._shadowOverlayResultSprite;\r\n        this._maskContainer.children.forEach(shadow => {\r\n            shadow.renderStep = true;\r\n            shadow.update(renderer, this._shadowCasterResultSprite, overlay);\r\n        });\r\n\r\n        // Render all the final shadow masks onto 1 texture\r\n        renderer.render(\r\n            this._maskContainer,\r\n            this._maskResultTexture,\r\n            this._clearShadowMaskBeforeDraw,\r\n            null,\r\n            true\r\n        );\r\n\r\n        // Indicate that the shadows may no longer render\r\n        this._maskContainer.children.forEach(shadow => {\r\n            delete shadow.renderStep;\r\n        });\r\n\r\n        // Remove all the shadows from the container\r\n        this._maskContainer.children.length = 0;\r\n    }\r\n\r\n    //  Apply the filter to a container\r\n    apply(filterManager, input, output) {\r\n        // Filter almost directly taken from the pixi mask filter\r\n        const maskSprite = this._maskResultSprite;\r\n        const tex = this._maskResultSprite.texture;\r\n\r\n        if (!tex.valid) {\r\n            return;\r\n        }\r\n        if (!tex.transform) {\r\n            tex.transform = new PIXI.TextureMatrix(tex, 0.0);\r\n        }\r\n\r\n        this.uniforms.mask = tex;\r\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(\r\n            this._maskMatrix,\r\n            maskSprite\r\n        );\r\n\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n\r\n    // Attribute setters\r\n    /**\r\n     * @type {number} The brightness that unlit areas of the world should have\r\n     */\r\n    set ambientLight(frac) {\r\n        this.uniforms.ambientLight = frac;\r\n    }\r\n    /**\r\n     * @type {number} The width of your application\r\n     */\r\n    set width(width) {\r\n        this._width = width;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    /**\r\n     * @type {number} The height of your application\r\n     */\r\n    set height(height) {\r\n        this._height = height;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    /**\r\n     * @type {boolean} Whether or not to use shadow casters as shadow overlays as well\r\n     */\r\n    set useShadowCasterAsOverlay(val) {\r\n        this._useShadowCastersAsOverlay = val;\r\n    }\r\n\r\n    // Attribute getters\r\n    get ambientLight() {\r\n        return this.uniforms.ambientLight;\r\n    }\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    get useShadowCasterAsOverlay() {\r\n        return this._useShadowCastersAsOverlay;\r\n    }\r\n}\r\n","import { filterFuncs } from \"./FilterFuncs\";\r\n\r\nlet maxDepthResolution = \"2000.0\";\r\nexport default class ShadowMapFilter extends PIXI.Filter {\r\n    constructor(shadow) {\r\n        super(\r\n            `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n            }\r\n        `,\r\n            `\r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowCasterSampler;\r\n            uniform vec2 shadowCasterSpriteDimensions;\r\n\r\n            uniform bool hasIgnoreShadowCaster;\r\n            uniform sampler2D ignoreShadowCasterSampler;\r\n            uniform mat3 ignoreShadowCasterMatrix;\r\n            uniform vec2 ignoreShadowCasterDimensions;\r\n\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform vec2 lightLoc;\r\n\r\n            uniform float depthResolution;\r\n            uniform bool darkenOverlay;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // Cap the depthResolution (as I expect performance loss by having a big value, but I am not sure)\r\n                float depthRes = min(${maxDepthResolution}, depthResolution);\r\n\r\n                // The current coordinate on the texutre measured in pixels, as well as a fraction\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n                vec2 normalizedCoord = pixelCoord / dimensions;\r\n                \r\n                // Extract the components of the normalized coordinate\r\n                float x = normalizedCoord.x;\r\n                float y = normalizedCoord.y;\r\n\r\n                // Calculate the offset of the lightPoint we are currently at\r\n                float offsetAngle = 2.0 * pi * y;\r\n                vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                // Calculate the angle at which we are ray tracing\r\n                float angle = x * pi * 2.0;\r\n\r\n                // The distance at which we hit an object\r\n                float hitDistancePer = 1.0;\r\n\r\n                // Increase the distance until we hit an object or reach the maximum value\r\n                bool reached = false;\r\n                for(float dist=0.0; dist < ${maxDepthResolution}; dist+=1.0){\r\n                    if(dist > depthRes) break;\r\n                    \r\n                    // Calculate the actual distance in pixel units, and use it to calculate the pixel coordinate to inspect\r\n                    float distance = dist / depthRes * lightRange;\r\n                    vec2 coord = lightLoc + offset + vec2(cos(angle), sin(angle)) * distance;\r\n                \r\n                    // Extract the pixel and check if it is opaque\r\n                    float opacity = texture2D(shadowCasterSampler, coord / shadowCasterSpriteDimensions).a;\r\n                    if((opacity > 0.0 && darkenOverlay) || opacity > 0.5){\r\n                        // Check if it isn't hitting something that should be ignore\r\n                        if(hasIgnoreShadowCaster){ \r\n                            vec2 l = (ignoreShadowCasterMatrix * vec3(coord, 1.0)).xy / ignoreShadowCasterDimensions;\r\n                            if(l.x >= -0.01 && l.x <= 1.01 && l.y >= -0.01 && l.y <= 1.01){\r\n                                // If the pixel at the ignoreShadowCaster is opaque here, skip this pixel\r\n                                if(opacity > 0.0){\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Calculate the percentage at which this hit occurred, and stop the loop\r\n                        if(!darkenOverlay){\r\n                            hitDistancePer = distance / lightRange;\r\n                            break;\r\n                        }\r\n                        reached = true;\r\n                    }else if(reached){\r\n                        hitDistancePer = (distance - 1.0) / lightRange;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Express the distance as a color in the map\r\n                gl_FragColor = floatToColor(hitDistancePer * 100000.0);\r\n            }\r\n        `\r\n        );\r\n\r\n        this.uniforms.lightPointCount = shadow.pointCount;\r\n\r\n        this.uniforms.dimensions = [shadow.radialResolution, shadow.pointCount];\r\n        this.shadow = shadow;\r\n\r\n        this.autoFit = false;\r\n        this.padding = 0;\r\n\r\n        this.ignoreShadowCasterMatrix = new PIXI.Matrix();\r\n    }\r\n\r\n    apply(filterManager, input, output) {\r\n        // Decide whether or not to darken the overlays\r\n        this.uniforms.darkenOverlay = this.shadow._darkenOverlay;\r\n\r\n        // Attach the object sampler\r\n        var sc = this.shadow._shadowCasterSprite;\r\n        this.uniforms.shadowCasterSpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowCasterSampler = sc._texture;\r\n\r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        var wt = this.shadow.worldTransform;\r\n        var scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\r\n        var range = this.shadow.range * scale;\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightLoc = [wt.tx, wt.ty];\r\n        this.uniforms.depthResolution = range * this.shadow.depthResolution;\r\n\r\n        // Check if there is an object that the filter should attempt to ignore\r\n        var isc = this.shadow.ignoreShadowCaster;\r\n        this.uniforms.hasIgnoreShadowCaster = !!isc;\r\n        if (isc) {\r\n            // Calculate the tranform matrix in order to access the proper pixel of the ignoreObject\r\n            isc.worldTransform.copy(this.ignoreShadowCasterMatrix);\r\n            this.uniforms.ignoreShadowCasterMatrix = this.ignoreShadowCasterMatrix.invert();\r\n\r\n            // Attach the ignore object\r\n            this.uniforms.ignoreShadowCasterDimensions = [\r\n                isc.width,\r\n                isc.height\r\n            ];\r\n            this.uniforms.ignoreShadowCasterSampler = isc._texture;\r\n        }\r\n\r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n}\r\n","import { filterFuncs } from \"./FilterFuncs\";\r\nexport default class ShadowMaskFilter extends PIXI.Filter {\r\n    constructor(shadow) {\r\n        super(\r\n            `\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 overlayMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n                vOverlayCoord = (overlayMatrix * vec3(aTextureCoord, 1.0) ).xy;\r\n            }\r\n        `,\r\n            `\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowOverlaySampler;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            uniform sampler2D shadowSampler;\r\n\r\n            uniform bool darkenOverlay;\r\n\r\n            uniform float lightPointCount;\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform float lightIntensity;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // The current coordinate on the texture measured in pixels\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n\r\n                // The distance delta relative to the center\r\n                vec2 lightDelta = pixelCoord - dimensions / 2.0;\r\n                float distance = sqrt(lightDelta.x * lightDelta.x + lightDelta.y * lightDelta.y);\r\n                if (distance > lightRange) return;\r\n\r\n                // The final intensity of the light at this pixel\r\n                float totalIntensity = 0.0;\r\n\r\n                // The intensity of the pixel in the overlay map at this pixel\r\n                vec4 overlayPixel = texture2D(shadowOverlaySampler, vOverlayCoord);\r\n\r\n                // Go through all light points (at most 1000) to add them to the intensity\r\n                for(float lightIndex=0.0; lightIndex<1000.0; lightIndex++){\r\n                    if (lightIndex >= lightPointCount) break; // Stop the loop if we went over the pointCount\r\n\r\n                    // Calculate the offset of this lightPoint, relative the the center of the light\r\n                    float lightIndexFrac = (lightIndex + 0.5) / lightPointCount;\r\n                    float offsetAngle = 2.0 * pi * lightIndexFrac;\r\n                    vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                    // Calculate the location of this pixel relative to the lightPoint, and check the depth map\r\n                    vec2 pointDelta = lightDelta - offset;\r\n                    float pointDistance = sqrt(pointDelta.x * pointDelta.x + pointDelta.y * pointDelta.y);\r\n                    float angle = mod(atan(pointDelta.y, pointDelta.x) + 2.0 * pi, 2.0 * pi);\r\n                    vec4 depthPixel = texture2D(shadowSampler, vec2(angle / (2.0 * pi), lightIndexFrac));\r\n\r\n                    // Extract the object distance from the depth map pixel\r\n                    float objectDistance = colorToFloat(depthPixel) / 100000.0 * lightRange;\r\n                    \r\n                    // Calculate the intensity of this pixel based on the overlaySampler and objectDistance\r\n                    float intensity = 0.0;\r\n                    if(darkenOverlay){\r\n                        if(objectDistance > pointDistance || objectDistance >= lightRange){\r\n                            intensity = 1.0 - distance / lightRange;\r\n                        }else if(overlayPixel.a > 0.5){\r\n                            intensity = 1.0 - distance / lightRange;\r\n                            intensity *= pow(1.0 - (distance - objectDistance) / (lightRange - objectDistance), 2.5) * overlayPixel.a;\r\n                        }\r\n                    }else{\r\n                        if(overlayPixel.a > 0.5){\r\n                            intensity = (1.0 - pow(distance / lightRange, 0.3)) * overlayPixel.a;\r\n                        }else if (objectDistance > pointDistance || objectDistance >= lightRange) {\r\n                            intensity = 1.0 - distance / lightRange;\r\n                        }\r\n                    }\r\n                    \r\n\r\n                    // Add the intensity to the total intensity\r\n                    totalIntensity += intensity / lightPointCount;\r\n                }\r\n\r\n                // Create a mask based on the intensity\r\n                gl_FragColor = vec4(vec3(lightIntensity * totalIntensity), 1.0);\r\n            }\r\n        `\r\n        );\r\n\r\n        this.uniforms.shadowSampler = shadow._shadowMapResultTexture;\r\n        this.uniforms.lightPointCount = shadow._pointCount;\r\n\r\n        this.shadow = shadow;\r\n\r\n        this.autoFit = false;\r\n        this.padding = 0;\r\n        this.overlayMatrix = new PIXI.Matrix();\r\n    }\r\n\r\n    apply(filterManager, input, output) {\r\n        // Decide whether or not to darken the overlays\r\n        this.uniforms.darkenOverlay = this.shadow._darkenOverlay;\r\n\r\n        // Attach the object sampler\r\n        var sc = this.shadow._shadowOverlaySprite;\r\n        this.uniforms.shadowOverlaySpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowOverlaySampler = sc._texture;\r\n\r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        var wt = this.shadow.worldTransform;\r\n        var scale = Math.sqrt(wt.a * wt.a + wt.b * wt.b);\r\n        var range = this.shadow.range * scale;\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightIntensity = this.shadow.intensity;\r\n\r\n        // Texture size increase in order to fit the sprite rectangle (even though we are only interested in a circle)\r\n        // So we have to consider this in the texture size\r\n        var texSize = 2 * this.shadow.range * (wt.a + wt.b);\r\n        this.uniforms.dimensions = [texSize, texSize];\r\n\r\n        // Calculate the object sampler position in relation to the light\r\n        this.uniforms.overlayMatrix = filterManager.calculateSpriteMatrix(\r\n            this.overlayMatrix,\r\n            sc\r\n        );\r\n\r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n}\r\n","import ContainerSetup from \"./mixins/Container\";\r\nimport Application from \"./Application\";\r\nimport ShadowFilter from \"./filters/ShadowFilter\";\r\nimport ShadowMapFilter from \"./filters/ShadowMapFilter\";\r\nimport ShadowMaskFilter from \"./filters/ShadowMaskFilter\";\r\nimport FilterFuncs from \"./filters/FilterFuncs\";\r\nimport Shadow from \"./Shadow\";\r\n\r\nPIXI.shadows = {\r\n    Application,\r\n    Shadow,\r\n    ShadowFilter,\r\n    filterInstances: [], // The list of filters that need to be updated\r\n    filters: [], // A list of filters to apply if no shadowLayers is specified\r\n\r\n    // Making all classes available for if you want to augmnent this code without going into the source and properly building things afterwards\r\n    __classes: {\r\n        ContainerSetup,\r\n        Application,\r\n        ShadowFilter,\r\n        ShadowMapFilter,\r\n        ShadowMaskFilter,\r\n        FilterFuncs,\r\n        Shadow\r\n    }\r\n};\r\nexport default PIXI.shadows;\r\n","import Shadow from \"../Shadow\";\r\nexport default function setup() {\r\n    const orTransform = PIXI.Container.prototype.updateTransform;\r\n    PIXI.Container.prototype.updateTransform = function() {\r\n        if (\r\n            this.shadowLayers ||\r\n            this.isShadowCaster ||\r\n            this.isShadowOverlay ||\r\n            this instanceof Shadow\r\n        ) {\r\n            // Find all the filters that this container should be added to\r\n            var filters =\r\n                (this.shadowLayers &&\r\n                    this.shadowLayers.map(layer => layer.shadowFilter)) ||\r\n                PIXI.shadows.filters;\r\n            if (this.isShadowCaster) this.shadowLayers;\r\n\r\n            // Go through all retrieved filters\r\n            filters.forEach(shadowFilter => {\r\n                // Add this container to the correct set of objects (casters | overlays | shadows)\r\n                if (this.isShadowCaster) {\r\n                    shadowFilter._shadowCasterContainer.children.push(this);\r\n                } else if (this.isShadowOverlay) {\r\n                    shadowFilter._shadowOverlayContainer.children.push(this);\r\n                } else if (this instanceof Shadow) {\r\n                    shadowFilter._maskContainer.children.push(this);\r\n                }\r\n\r\n                // Make sure that the filter's existence is known so it will be updated\r\n                if (PIXI.shadows.filterInstances.indexOf(shadowFilter) == -1)\r\n                    PIXI.shadows.filterInstances.push(shadowFilter);\r\n            });\r\n        }\r\n\r\n        return orTransform.apply(this, arguments);\r\n    };\r\n\r\n    const orRenderWebGL = PIXI.Container.prototype.renderWebGL;\r\n    PIXI.Container.prototype.renderWebGL = function() {\r\n        if (\r\n            this.shadowLayers ||\r\n            this.isShadowCaster ||\r\n            this.isShadowOverlay ||\r\n            this instanceof Shadow\r\n        ) {\r\n            // Don't render if it is called by the normal render function (renderStep is set in ShadowFilter.update)\r\n            if (!this.renderStep) return;\r\n        }\r\n\r\n        return orRenderWebGL.apply(this, arguments);\r\n    };\r\n}\r\n"],"sourceRoot":""}