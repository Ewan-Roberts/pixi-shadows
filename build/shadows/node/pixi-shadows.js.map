{"version":3,"sources":["webpack://pixi-shadows/webpack/universalModuleDefinition","webpack://pixi-shadows/webpack/bootstrap","webpack://pixi-shadows/./src/shadows/Shadow.js","webpack://pixi-shadows/./src/shadows/filters/FilterFuncs.js","webpack://pixi-shadows/./src/shadows/filters/ShadowFilter.js","webpack://pixi-shadows/./src/shadows/filters/ShadowMapFilter.js","webpack://pixi-shadows/./src/shadows/filters/ShadowMaskFilter.js","webpack://pixi-shadows/./src/shadows/index.js","webpack://pixi-shadows/./src/shadows/mixins/Application.js","webpack://pixi-shadows/./src/shadows/mixins/Container.js"],"names":["Shadow","range","intensity","pointCount","scatterRange","PIXI","RenderTexture","create","_range","_pointCount","_scatterRange","_intensity","_radialResolution","_depthResolution","anchor","set","_ignoreShadowCaster","__createShadowMapSources","texture","destroy","_shadowMapSprite","_shadowMapResultSprite","_shadowMapResultTexture","baseTexture","scaleMode","SCALE_MODES","NEAREST","Sprite","filters","ShadowMapFilter","filter","ShadowMaskFilter","blendMode","BLEND_MODES","ADD","renderer","renderStep","shadowCasterSprite","shadowOverlaySprite","_shadowCasterSprite","_shadowOverlaySprite","render","__updateTextureSize","count","resolution","sprite","filterFuncs","ShadowFilter","width","height","_width","_height","tick","uniforms","ambientLight","size","_useShadowCastersAsOverlay","__createCasterSources","__createOverlaySources","__createMaskSources","_shadowOverlayResultTexture","_shadowOverlayResultSprite","_shadowOverlayContainer","Container","_shadowCasterResultTexture","_shadowCasterResultSprite","_shadowCasterContainer","_maskResultTexture","_maskResultSprite","_maskMatrix","Matrix","_maskContainer","children","forEach","child","_activeParentLayer","length","overlay","shadow","update","filterManager","input","output","maskSprite","tex","valid","transform","TextureMatrix","mask","otherMatrix","calculateSpriteMatrix","applyFilter","frac","val","Filter","maxDepthResolution","lightPointCount","dimensions","radialResolution","autoFit","padding","ignoreShadowCasterMatrix","sc","shadowCasterSpriteDimensions","shadowCasterSampler","_texture","wt","worldTransform","scale","Math","sqrt","a","b","lightRange","lightScatterRange","lightLoc","tx","ty","depthResolution","isc","ignoreShadowCaster","hasIgnoreShadowCaster","copy","invert","ignoreShadowCasterDimensions","ignoreShadowCasterSampler","shadowSampler","overlayMatrix","shadowOverlaySpriteDimensions","shadowOverlaySampler","lightIntensity","texSize","shadows","init","application","casterGroup","display","Group","casterLayer","Layer","overlayGroup","overlayLayer","renderWebGL","container","stage","addChild","lights","diffuseLayer","diffuseGroup","normalLayer","normalGroup","lightLayer","lightGroup","diffuseBlackSprite","getRenderTexture","tint","__classes","ContainerSetup","ApplicationSetup","FilterFuncs","augment","shadowFilter","Stage","ticker","remove","cacheParent","parent","_tempDisplayObjectParent","updateTransform","undefined","setup","shadowCasterGroup","shadowOverlayGroup","orTransform","prototype","parentGroup","push","apply","arguments"],"mappings":"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","file":"pixi-shadows.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pixi-shadows\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pixi-shadows\"] = factory();\n\telse\n\t\troot[\"pixi-shadows\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/shadows/index.js\");\n","import ShadowMaskFilter from './filters/ShadowMaskFilter';\r\nimport ShadowMapFilter from './filters/ShadowMapFilter';\r\n\r\n/**\r\n * @class\r\n * @memberof PIXI.shadows\r\n *\r\n * @param range {number} The radius of the lit area in pixels.\r\n * @param [intensity=1] {number} The opacity of the lit area.\r\n * @param [pointCount=20] {number} The number of points that makes up this light.\r\n * @param [scatterRange=15] {number} The radius at which the points of the light should be scattered.\r\n */\r\n\r\nexport default class Shadow extends PIXI.Sprite{\r\n    constructor(range, intensity, pointCount, scatterRange){\r\n        super(PIXI.RenderTexture.create(range*2, range*2));\r\n\r\n        this._range = range;\r\n        this._pointCount = pointCount||20;              //The number of lightpoins\r\n        this._scatterRange = scatterRange||(this._pointCount==1?0:15);\r\n        this._intensity = intensity||1;\r\n        this._radialResolution = 800;\r\n        this._depthResolution = 1;                      //per screen pixel\r\n        this.anchor.set(0.5);\r\n        \r\n        this._ignoreShadowCaster;\r\n\r\n        this.__createShadowMapSources();\r\n    }\r\n    // Create the texture to apply this mask filter to\r\n    __updateTextureSize(){\r\n        this.texture.destroy();\r\n        this.texture = PIXI.RenderTexture.create(this._range*2, this._range*2);\r\n    }\r\n    // Create the resources that create the shadow map\r\n    __createShadowMapSources(){\r\n        if(this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if(this._shadowMapResultSprite) this._shadowMapResultSprite.destroy();\r\n        if(this._shadowMapResultTexture) this._shadowMapResultTexture.destroy();\r\n        \r\n        // A blank texture/sprite to apply the filter to \r\n        this._shadowMapResultTexture = PIXI.RenderTexture.create(this._radialResolution, this._pointCount);\r\n        this._shadowMapResultTexture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowMapSprite = new PIXI.Sprite(this._shadowMapResultTexture);\r\n        this._shadowMapSprite.filters = [new ShadowMapFilter(this)];\r\n        \r\n        // The resulting texture/sprite after the filter has been applied\r\n        this._shadowMapResultSprite = new PIXI.Sprite(this._shadowMapResultTexture);\r\n\r\n        // Create the mask filter\r\n        var filter = new ShadowMaskFilter(this);\r\n        filter.blendMode = PIXI.BLEND_MODES.ADD;\r\n        this.filters = [filter];\r\n    }\r\n    // Properly dispose all the created resources\r\n    destroy(){\r\n        if(this._shadowMapSprite) this._shadowMapSprite.destroy();\r\n        if(this._shadowMapResultSprite) this._shadowMapResultSprite.destroy();\r\n        if(this._shadowMapResultTexture) this._shadowMapResultTexture.destroy();\r\n        this.texture.destroy();\r\n        return super.destroy();\r\n    }\r\n    // Don't render this sprite unless we are in the dedicated render step called by the shadow filter\r\n    renderAdvancedWebGL(renderer){\r\n        if(this.renderStep)\r\n            super.renderAdvancedWebGL(renderer);\r\n    }\r\n\r\n    // Update the map to create the mask from\r\n    update(renderer, shadowCasterSprite, shadowOverlaySprite){\r\n        this._shadowCasterSprite = shadowCasterSprite;\r\n        this._shadowOverlaySprite = shadowOverlaySprite;\r\n        renderer.render(this._shadowMapSprite, this._shadowMapResultTexture, true, null, true);\r\n    }\r\n\r\n    // Attribute setters\r\n    /**\r\n     * @type {number} The radius of the lit area in pixels.\r\n     */\r\n    set range(range){\r\n        this._range = range;\r\n        this.__updateTextureSize();\r\n    }\r\n    /**\r\n     * @type {number} The number of points that makes up this light, for soft shadows. (More points = softer shadow edges + more intensive).\r\n     */\r\n    set pointCount(count){\r\n        this._pointCount = count;\r\n        this.__createShadowMapSources();\r\n    }\r\n    /**\r\n     * @type {number} The opacity of the lit area. (may exceed 1).\r\n     */\r\n    set scatterRange(range){\r\n        this._scatterRange = range;\r\n    }\r\n    /**\r\n     * @type {number} The radius at which the points of the light should be scattered. (Greater range = software shadow).\r\n     */\r\n    set intensity(intensity){\r\n        this._intensity = intensity;\r\n    }\r\n    /**\r\n     * @type {number} The number of rays to draw for the light. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    set radialResolution(resolution){\r\n        this._radialResolution = resolution;\r\n        this.__createShadowMapSources();\r\n    }\r\n    /**\r\n     * @type {number} The of steps to take per pixel. (Higher resolution = more precise edges + more intensive).\r\n     */\r\n    set depthResolution(resolution){\r\n        this._depthResolution = resolution;\r\n    }\r\n    /**\r\n     * @type {PIXI.Sprite} A shadow caster to ignore while creating the shadows. (Can be used if sprite and light always overlap).\r\n     */\r\n    set ignoreShadowCaster(sprite){\r\n        this._ignoreShadowCaster = sprite;\r\n    }\r\n\r\n    // Attribute getters\r\n    get range(){\r\n        return this._range;\r\n    }\r\n    get pointCount(){\r\n        return this._pointCount;\r\n    }\r\n    get scatterRange(){\r\n        return this._scatterRange;\r\n    }\r\n    get intensity(){\r\n        return this._intensity;\r\n    }\r\n    get radialResolution(){\r\n        return this._radialResolution;\r\n    }\r\n    get depthResolution(){\r\n        return this._depthResolution;\r\n    }\r\n    get ignoreShadowCaster(){\r\n        return this._ignoreShadowCaster;\r\n    }\r\n}","// Some functions to map a value as a color\nexport const filterFuncs = `\nfloat colorToFloat(vec4 color){\n    return (color.r + (color.g + color.b * 256.0) * 256.0) * 255.0 - 8388608.0;\n}\nvec4 floatToColor(float f){\n    f += 8388608.0;\n    vec4 color;\n    color.a = 255.0;\n    color.b = floor(f / 256.0 / 256.0);\n    color.g = floor((f - color.b * 256.0 * 256.0) / 256.0);\n    color.r = floor(f - color.b * 256.0 * 256.0 - color.g * 256.0);\n    return color / 255.0;\n}\n`;","export default class ShadowFilter extends PIXI.Filter{\r\n    constructor(width, height){\r\n        super(`\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 otherMatrix;\r\n            \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            void main(void)\r\n            {\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n            \r\n                vTextureCoord = aTextureCoord;\r\n                vMaskCoord = ( otherMatrix * vec3( aTextureCoord, 1.0)  ).xy;\r\n            }\r\n        `,`                    \r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            \r\n            uniform sampler2D uSampler;\r\n            uniform sampler2D mask;\r\n            uniform vec4 maskClamp;\r\n            uniform float ambientLight;\r\n            \r\n            void main(void){            \r\n                vec4 original = texture2D(uSampler, vTextureCoord);\r\n                vec4 masky = texture2D(mask, vMaskCoord);\r\n            \r\n                original *= ambientLight + (1.0 - ambientLight) * (masky.r + masky.g + masky.b) / 3.0;\r\n            \r\n                gl_FragColor = original;\r\n            }\r\n        `);\r\n\r\n        this._width = width;\r\n        this._height = height;\r\n        this.tick = 0;\r\n\r\n        this.uniforms.ambientLight = 0.0;\r\n        this.uniforms.size = [this._width, this._height];\r\n        this._useShadowCastersAsOverlay = true;\r\n\r\n        this.__createCasterSources();\r\n        this.__createOverlaySources();\r\n        this.__createMaskSources();\r\n    }\r\n    // Shadow overlay objects\r\n    __createOverlaySources(){\r\n        if(this._shadowOverlayResultTexture) this._shadowOverlayResultTexture.destroy();\r\n        if(this._shadowOverlayResultSprite) this._shadowOverlayResultSprite.destroy();\r\n\r\n        if(!this._shadowOverlayContainer) this._shadowOverlayContainer = new PIXI.Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowOverlayResultTexture = PIXI.RenderTexture.create(this._width, this._height);\r\n        this._shadowOverlayResultTexture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowOverlayResultSprite = new PIXI.Sprite(this._shadowOverlayResultTexture);\r\n    }\r\n    // Shadow caster objects\r\n    __createCasterSources(){\r\n        if(this._shadowCasterResultTexture) this._shadowCasterResultTexture.destroy();\r\n        if(this._shadowCasterResultSprite) this._shadowCasterResultSprite.destroy();\r\n\r\n        if(!this._shadowCasterContainer) this._shadowCasterContainer = new PIXI.Container();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._shadowCasterResultTexture = PIXI.RenderTexture.create(this._width, this._height);\r\n        this._shadowCasterResultTexture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        this._shadowCasterResultSprite = new PIXI.Sprite(this._shadowCasterResultTexture);\r\n    }\r\n    // Final mask to apply as a filter\r\n    __createMaskSources(){\r\n        if(this._maskResultTexture) this._maskResultTexture.destroy();\r\n        if(this._maskResultSprite) this._maskResultSprite.destroy();\r\n\r\n        // Create maskMatrix for shader transform data\r\n        if(!this._maskMatrix)  this._maskMatrix = new PIXI.Matrix();\r\n\r\n        // Create the final mask to apply to the container that this filter is applied to\r\n        this._maskResultTexture = PIXI.RenderTexture.create(this._width, this._height);\r\n        this._maskResultTexture.baseTexture.scaleMode = PIXI.SCALE_MODES.NEAREST;\r\n        if(!this._maskContainer) this._maskContainer = new PIXI.Container();\r\n        this._maskResultSprite = new PIXI.Sprite(this._maskResultTexture);\r\n    }\r\n    // Update the mask texture (called from the Application mixin)\r\n    update(renderer){\r\n        // Shadows and objects will automatically be added to containers because of the Container mixin\r\n\r\n        this.tick++; // Increase the tick so that shadows and objects know they can add themselves to the container again in their next update\r\n\r\n        /* render shadow casters */\r\n        // Remove the parent layer from the objects in order to properly render it to the container\r\n        this._shadowCasterContainer.children.forEach(child => {\r\n            child._activeParentLayer = null;\r\n        });\r\n\r\n        // Render all the objects onto 1 texture\r\n        renderer.render(this._shadowCasterContainer, this._shadowCasterResultTexture, true, null, true);\r\n\r\n        // Remove all the objects from the container\r\n        this._shadowCasterContainer.children.length = 0;\r\n\r\n        /* render shadow overlays */\r\n        if(!this._useShadowCastersAsOverlay){\r\n            this._shadowOverlayContainer.children.forEach(child => {\r\n                child._activeParentLayer = null;\r\n            });\r\n    \r\n            // Render all the objects onto 1 texture\r\n            renderer.render(this._shadowOverlayContainer, this._shadowOverlayResultTexture, true, null, true);\r\n    \r\n            // Remove all the objects from the container\r\n            this._shadowOverlayContainer.children.length = 0;\r\n        }\r\n\r\n        /* render shadows */\r\n        \r\n        // Update all shadows and indicate that they may properly be rendered now\r\n        let overlay = this._useShadowCastersAsOverlay? this._shadowCasterResultSprite: this._shadowOverlayResultSprite;\r\n        this._maskContainer.children.forEach(shadow => {\r\n            shadow.renderStep = true;\r\n            shadow.update(renderer, this._shadowCasterResultSprite, overlay);\r\n        });\r\n\r\n        // Render all the final shadow masks onto 1 texture\r\n        renderer.render(this._maskContainer, this._maskResultTexture, true, null, true);\r\n\r\n        // Indicate that the shadows may no longer render\r\n        this._maskContainer.children.forEach(shadow => {\r\n            delete shadow.renderStep;\r\n        });\r\n\r\n        // Remove all the shadows from the container\r\n        this._maskContainer.children.length = 0;\r\n    }\r\n\r\n    //  Apply the filter to a container\r\n    apply(filterManager, input, output){\r\n        // Filter almost directly taken from the pixi mask filter\r\n        const maskSprite = this._maskResultSprite;\r\n        const tex = this._maskResultSprite.texture;\r\n\r\n        if (!tex.valid) {\r\n            return;\r\n        }\r\n        if (!tex.transform) {\r\n            tex.transform = new PIXI.TextureMatrix(tex, 0.0);\r\n        }\r\n\r\n        this.uniforms.mask = tex;\r\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this._maskMatrix, maskSprite);\r\n\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n\r\n    // Attribute setters\r\n    /**\r\n     * @type {number} The brightness that unlit areas of the world should have\r\n     */\r\n    set ambientLight(frac){\r\n        this.uniforms.ambientLight = frac;\r\n    }\r\n    /**\r\n     * @type {number} The width of your application\r\n     */\r\n    set width(width){\r\n        this._width = width;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    /**\r\n     * @type {number} The height of your application\r\n     */\r\n    set height(height){\r\n        this._height = height;\r\n\r\n        this.uniforms.size = [this._width, this._height];\r\n        this.__createOverlaySources();\r\n        this.__createCasterSources();\r\n        this.__createMaskSources();\r\n    }\r\n    /**\r\n     * @type {boolean} Whether or not to use shadow casters as shadow overlays as well \r\n     */\r\n    set useShadowCasterAsOverlay(val){\r\n        this._useShadowCastersAsOverlay = val;\r\n    }\r\n\r\n    // Attribute getters\r\n    get ambientLight(){\r\n        return this.uniforms.ambientLight;\r\n    }\r\n    get width(){\r\n        return this._width;\r\n    }\r\n    get height(){\r\n        return this._height;\r\n    }\r\n    get useShadowCasterAsOverlay(){\r\n        return this._useShadowCastersAsOverlay;\r\n    }\r\n}","import { filterFuncs } from './FilterFuncs';\r\n\r\nlet maxDepthResolution = '2000.0';\r\nexport default class ShadowMapFilter extends PIXI.Filter{\r\n    constructor(shadow){\r\n        super(`\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n            }\r\n        `,`\r\n            varying vec2 vMaskCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowCasterSampler;\r\n            uniform vec2 shadowCasterSpriteDimensions;\r\n\r\n            uniform bool hasIgnoreShadowCaster;\r\n            uniform sampler2D ignoreShadowCasterSampler;\r\n            uniform mat3 ignoreShadowCasterMatrix;\r\n            uniform vec2 ignoreShadowCasterDimensions;\r\n\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform vec2 lightLoc;\r\n\r\n            uniform float depthResolution;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // Cap the depthResolution (as I expect performance loss by having a big value, but I am not sure)\r\n                float depthRes = min(${maxDepthResolution}, depthResolution);\r\n\r\n                // The current coordinate on the texutre measured in pixels, as well as a fraction\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n                vec2 normalizedCoord = pixelCoord / dimensions;\r\n                \r\n                // Extract the components of the normalized coordinate\r\n                float x = normalizedCoord.x;\r\n                float y = normalizedCoord.y;\r\n\r\n                // Calculate the offset of the lightPoint we are currently at\r\n                float offsetAngle = 2.0 * pi * y;\r\n                vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                // Calculate the angle at which we are ray tracing\r\n                float angle = x * pi * 2.0;\r\n\r\n                // The distance at which we hit an object\r\n                float hitDistancePer = 1.0;\r\n\r\n                // Increase the distance until we hit an object or reach the maximum value\r\n                for(float dist=0.0; dist < ${maxDepthResolution}; dist+=1.0){\r\n                    if(dist > depthRes) break;\r\n                    \r\n                    // Calculate the actual distance in pixel units, and use it to calculate the pixel coordinate to inspect\r\n                    float distance = dist / depthRes * lightRange;\r\n                    vec2 coord = lightLoc + offset + vec2(cos(angle), sin(angle)) * distance;\r\n                \r\n                    // Extract the pixel and check if it is opaque\r\n                    float opacity = texture2D(shadowCasterSampler, coord / shadowCasterSpriteDimensions).a;\r\n                    if(opacity > 0.5){\r\n                        // Check if it isn't hitting something that should be ignore\r\n                        if(hasIgnoreShadowCaster){ \r\n                            vec2 l = (ignoreShadowCasterMatrix * vec3(coord, 1.0)).xy / ignoreShadowCasterDimensions;\r\n                            if(l.x >= -0.01 && l.x <= 1.01 && l.y >= -0.01 && l.y <= 1.01){\r\n                                // If the pixel at the ignoreShadowCaster is opaque here, skip this pixel\r\n                                if(opacity > 0.5){\r\n                                    continue;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Calculate the percentage at which this hit occurred, and stop the loop\r\n                        hitDistancePer = distance / lightRange;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                // Express the distance as a color in the map\r\n                gl_FragColor = floatToColor(hitDistancePer * 100000.0);\r\n            }\r\n        `);\r\n        \r\n        this.uniforms.lightPointCount = shadow.pointCount;\r\n\r\n        this.uniforms.dimensions = [shadow.radialResolution, shadow.pointCount];\r\n        this.shadow = shadow;\r\n        \r\n        this.autoFit = false;\r\n        this.padding = 0;\r\n\r\n        this.ignoreShadowCasterMatrix = new PIXI.Matrix();\r\n    }\r\n    \r\n    apply(filterManager, input, output){\r\n        // Attach the object sampler\r\n        var sc = this.shadow._shadowCasterSprite;\r\n        this.uniforms.shadowCasterSpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowCasterSampler = sc._texture;\r\n\r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        var wt = this.shadow.worldTransform;\r\n        var scale = Math.sqrt(wt.a*wt.a + wt.b*wt.b);\r\n        var range = this.shadow.range * scale;\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightLoc = [wt.tx, wt.ty];\r\n        this.uniforms.depthResolution = range * this.shadow.depthResolution;\r\n\r\n        // Check if there is an object that the filter should attempt to ignore\r\n        var isc = this.shadow.ignoreShadowCaster;\r\n        this.uniforms.hasIgnoreShadowCaster = !!isc;\r\n        if(isc){\r\n            // Calculate the tranform matrix in order to access the proper pixel of the ignoreObject\r\n            isc.worldTransform.copy(this.ignoreShadowCasterMatrix);\r\n            this.uniforms.ignoreShadowCasterMatrix = this.ignoreShadowCasterMatrix.invert();\r\n\r\n            // Attach the ignore object\r\n            this.uniforms.ignoreShadowCasterDimensions = [isc.width, isc.height];\r\n            this.uniforms.ignoreShadowCasterSampler = isc._texture;\r\n        }\r\n\r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n}","import { filterFuncs } from './FilterFuncs';\r\nexport default class ShadowMaskFilter extends PIXI.Filter{\r\n    constructor(shadow){\r\n        super(`\r\n            attribute vec2 aVertexPosition;\r\n            attribute vec2 aTextureCoord;\r\n            \r\n            uniform mat3 projectionMatrix;\r\n            uniform mat3 overlayMatrix;\r\n            uniform mat3 filterMatrix;\r\n            \r\n            varying vec2 vTextureCoord;\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vFilterCoord;\r\n            \r\n            void main(void){\r\n                gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\r\n                vTextureCoord = aTextureCoord;\r\n                vOverlayCoord = (overlayMatrix * vec3(aTextureCoord, 1.0) ).xy;\r\n            }\r\n        `,`\r\n            varying vec2 vOverlayCoord;\r\n            varying vec2 vTextureCoord;\r\n            uniform vec4 filterArea;\r\n            \r\n            uniform sampler2D shadowOverlaySampler;\r\n\r\n            uniform vec2 dimensions;\r\n\r\n            uniform sampler2D shadowSampler;\r\n\r\n            uniform float lightPointCount;\r\n            uniform float lightRange;\r\n            uniform float lightScatterRange;\r\n            uniform float lightIntensity;\r\n\r\n            ${filterFuncs}\r\n            \r\n            void main(void){\r\n                float pi = 3.141592653589793238462643;\r\n                \r\n                // The current coordinate on the texture measured in pixels\r\n                vec2 pixelCoord = vTextureCoord * filterArea.xy;\r\n\r\n                // The distance delta relative to the center\r\n                vec2 lightDelta = pixelCoord - dimensions / 2.0;\r\n                float distance = sqrt(lightDelta.x * lightDelta.x + lightDelta.y * lightDelta.y);\r\n                if (distance > lightRange) return;\r\n\r\n                // The final intensity of the light at this pixel\r\n                float totalIntensity = 0.0;\r\n\r\n                // The intensity of the pixel in the overlay map at this pixel\r\n                vec4 overlayPixel = texture2D(shadowOverlaySampler, vOverlayCoord);\r\n\r\n                // Go through all light points (at most 1000) to add them to the intensity\r\n                for(float lightIndex=0.0; lightIndex<1000.0; lightIndex++){\r\n                    if (lightIndex >= lightPointCount) break; // Stop the loop if we went over the pointCount\r\n\r\n                    // Calculate the offset of this lightPoint, relative the the center of the light\r\n                    float lightIndexFrac = (lightIndex + 0.5) / lightPointCount;\r\n                    float offsetAngle = 2.0 * pi * lightIndexFrac;\r\n                    vec2 offset = vec2(cos(offsetAngle), sin(offsetAngle)) * lightScatterRange;\r\n\r\n                    // Calculate the location of this pixel relative to the lightPoint, and check the depth map\r\n                    vec2 pointDelta = lightDelta - offset;\r\n                    float pointDistance = sqrt(pointDelta.x * pointDelta.x + pointDelta.y * pointDelta.y);\r\n                    float angle = mod(atan(pointDelta.y, pointDelta.x) + 2.0 * pi, 2.0 * pi);\r\n                    vec4 depthPixel = texture2D(shadowSampler, vec2(angle / (2.0 * pi), lightIndexFrac));\r\n\r\n                    // Extract the object distance from the depth map pixel\r\n                    float objectDistance = colorToFloat(depthPixel) / 100000.0 * lightRange;\r\n                    \r\n                    // Calculate the intensity of this pixel based on the overlaySampler and objectDistance\r\n                    float intensity = 0.0;\r\n                    if(overlayPixel.a > 0.6){\r\n                        intensity = (1.0 - pow(distance / lightRange, 0.3)) * overlayPixel.a;\r\n                    }else if (objectDistance > pointDistance || objectDistance >= lightRange) {\r\n                        intensity = 1.0 - distance / lightRange;\r\n                    }\r\n\r\n                    // Add the intensity to the total intensity\r\n                    totalIntensity += intensity / lightPointCount;\r\n                }\r\n\r\n                // Create a mask based on the intensity\r\n                gl_FragColor = vec4(vec3(lightIntensity * totalIntensity), 1.0);\r\n            }\r\n        `);\r\n\r\n        this.uniforms.shadowSampler = shadow._shadowMapResultTexture;\r\n        this.uniforms.lightPointCount = shadow._pointCount;        \r\n        \r\n        this.shadow = shadow;\r\n\r\n        this.autoFit = false;\r\n        this.padding = 0;\r\n        this.overlayMatrix = new PIXI.Matrix();\r\n    }\r\n    \r\n    apply(filterManager, input, output){\r\n        // Attach the object sampler\r\n        var sc = this.shadow._shadowOverlaySprite;\r\n        this.uniforms.shadowOverlaySpriteDimensions = [sc.width, sc.height];\r\n        this.uniforms.shadowOverlaySampler = sc._texture;\r\n        \r\n        // Use the world transform (data about the absolute location on the screen) to determine the lights relation to the objectSampler\r\n        var wt = this.shadow.worldTransform;\r\n        var scale = Math.sqrt(wt.a*wt.a + wt.b*wt.b);\r\n        var range = this.shadow.range * scale;\r\n        this.uniforms.lightRange = range;\r\n        this.uniforms.lightScatterRange = this.shadow.scatterRange;\r\n        this.uniforms.lightIntensity = this.shadow.intensity;\r\n\r\n        // Texture size increase in order to fit the sprite rectangle (even though we are only interested in a circle)\r\n        // So we have to consider this in the texture size\r\n        var texSize = 2 * this.shadow.range * (wt.a + wt.b);\r\n        this.uniforms.dimensions = [texSize, texSize];\r\n        \r\n        // Calculate the object sampler position in relation to the light\r\n        this.uniforms.overlayMatrix = filterManager.calculateSpriteMatrix(this.overlayMatrix, sc);\r\n        \r\n        // Apply the filter\r\n        filterManager.applyFilter(this, input, output);\r\n    }\r\n}","import ContainerSetup from \"./mixins/Container\";\r\nimport ApplicationSetup from \"./mixins/Application\";\r\nimport ShadowFilter from \"./filters/ShadowFilter\";\r\nimport ShadowMapFilter from \"./filters/ShadowMapFilter\";\r\nimport ShadowMaskFilter from \"./filters/ShadowMaskFilter\";\r\nimport FilterFuncs from \"./filters/FilterFuncs\";\r\nimport Shadow from \"./Shadow\";\r\n\r\nPIXI.shadows = {\r\n  init: function(application) {\r\n    // The objects that will cast shadows\r\n    this.casterGroup = new PIXI.display.Group();\r\n    this.casterLayer = new PIXI.display.Layer(this.casterGroup);\r\n\r\n    // The objects that will remain ontop of the shadows\r\n    this.overlayGroup = new PIXI.display.Group();\r\n    this.overlayLayer = new PIXI.display.Layer(this.overlayGroup);\r\n\r\n    // Make sure the caster objects aren't actually visible\r\n    this.casterLayer.renderWebGL = function() {};\r\n    this.overlayLayer.renderWebGL = function() {};\r\n\r\n    // Create the shadow filter\r\n    this.filter = new ShadowFilter(\r\n      application.renderer.width,\r\n      application.renderer.height\r\n    );\r\n\r\n    // Set up the container mixin so that it tells the filter about the available shadows and objects\r\n    ContainerSetup(this.casterGroup, this.overlayGroup, this.filter);\r\n\r\n    // Overwrite the application render method\r\n    ApplicationSetup(application, this.filter);\r\n\r\n    // If a container is specified, set up the filter\r\n    var container = new PIXI.Container();\r\n    application.stage.addChild(container);\r\n\r\n    // Set up the shadow layers\r\n    application.stage.addChild(this.casterLayer, this.overlayLayer);\r\n\r\n    // Set up pixi lights if available\r\n    if (PIXI.lights) {\r\n      // Set up pixi-light's layers\r\n      this.diffuseLayer = new PIXI.display.Layer(PIXI.lights.diffuseGroup);\r\n      this.normalLayer = new PIXI.display.Layer(PIXI.lights.normalGroup);\r\n      this.lightLayer = new PIXI.display.Layer(PIXI.lights.lightGroup);\r\n      var diffuseBlackSprite = new PIXI.Sprite(\r\n        this.diffuseLayer.getRenderTexture()\r\n      );\r\n      diffuseBlackSprite.tint = 0;\r\n\r\n      application.stage.addChild(\r\n        this.diffuseLayer,\r\n        diffuseBlackSprite,\r\n        this.normalLayer,\r\n        this.lightLayer\r\n      );\r\n\r\n      // Add the shadow filter to the diffuse layer\r\n      this.diffuseLayer.filters = [this.filter];\r\n    } else {\r\n      // Add the shadow filter to the container\r\n      container.filters = [this.filter];\r\n    }\r\n\r\n    // Rreturn the container to use\r\n    return container;\r\n  },\r\n  Shadow,\r\n\r\n  // Making all classes available for if you want to augmnent this code without going into the source and properly building things afterwards\r\n  __classes: {\r\n    ContainerSetup,\r\n    ApplicationSetup,\r\n    ShadowFilter,\r\n    ShadowMapFilter,\r\n    ShadowMaskFilter,\r\n    FilterFuncs,\r\n    Shadow\r\n  }\r\n};\r\nexport default PIXI.shadows;\r\n","export default function augment(application, shadowFilter){\r\n    // Replace the stage with a layered stage\r\n    application.stage = new PIXI.display.Stage();\r\n\r\n    // Remove the current render fucntion\r\n    application.ticker.remove(application.render, application); \r\n\r\n    // Overwrite the render function\r\n    application.render = function(){\r\n        // Update stage transforms\r\n        const cacheParent = this.stage.parent;\r\n        this.stage.parent = this.renderer._tempDisplayObjectParent;\r\n        this.stage.updateTransform();\r\n        this.stage.parent = cacheParent;\r\n    \r\n        // Update the shadow filter\r\n        shadowFilter.update(this.renderer);\r\n    \r\n        // Render the stage without updating the transforms again\r\n        this.renderer.render(this.stage, undefined, undefined, undefined, true);\r\n    }\r\n\r\n    // Reassign ticker because its setter initialises the render method\r\n    application.ticker = application.ticker;\r\n}","import Shadow from '../Shadow';\r\nexport default function setup(shadowCasterGroup, shadowOverlayGroup, shadowFilter){\r\n    const orTransform = PIXI.Container.prototype.updateTransform;\r\n    PIXI.Container.prototype.updateTransform = function(){\r\n\r\n        if(this.parentGroup == shadowCasterGroup){\r\n            if(this.tick != shadowFilter.tick)\r\n                shadowFilter._shadowCasterContainer.children.push(this);\r\n            this.tick = shadowFilter.tick;\r\n        }\r\n\r\n        if(this.parentGroup == shadowOverlayGroup){\r\n            if(this.tick != shadowFilter.tick)\r\n                shadowFilter._shadowOverlayContainer.children.push(this);\r\n            this.tick = shadowFilter.tick;\r\n        }\r\n    \r\n        if(this instanceof Shadow){\r\n            if(this.tick != shadowFilter.tick)\r\n                shadowFilter._maskContainer.children.push(this);\r\n            this.tick = shadowFilter.tick;\r\n        }\r\n    \r\n        return orTransform.apply(this, arguments);\r\n    };\r\n}"],"sourceRoot":""}